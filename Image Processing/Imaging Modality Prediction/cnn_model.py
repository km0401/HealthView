# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ACNsmL26VpkNWPKnqj3boumvAq0bkOFZ
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_generator = datagen.flow_from_directory(
    directory='drive/MyDrive/Chest_data',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training',
    shuffle=True
)

val_generator = datagen.flow_from_directory(
    directory='drive/MyDrive/Chest_data',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation',
    shuffle=True
)

# define the CNN architecture
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(3, activation='softmax'))

# compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# train the model
model.fit(train_generator, epochs=10, validation_data=val_generator)

# evaluate the model on the test set
test_generator = datagen.flow_from_directory(
    directory='drive/MyDrive/Chest_data',
    target_size=(224, 224),
    batch_size=1,
    class_mode='categorical',
    shuffle=False
)

filenames = test_generator.filenames
nb_samples = len(filenames)

y_prob = model.predict_generator(test_generator, steps=nb_samples)
y_pred = np.argmax(y_prob, axis=1)

# print out predictions for each image in the testing dataset
for i in range(nb_samples):
    print('Image:', filenames[i], 'True class:', test_generator.classes[i], 'Predicted class:', y_pred[i])

print('Accuracy: {:.2f}%'.format((y_pred == test_generator.classes).mean() * 100))

